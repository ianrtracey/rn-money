apply plugin: "com.android.application"
apply from: project(":react-native-config").projectDir.getPath() + "/dotenv.gradle"

import com.android.build.OutputFile

project.ext.react = [
  entryFile: "src/index.ts",
  enableHermes: false
]

apply from: "../../node_modules/react-native/react.gradle"

if (project.env.get("CODEPUSH_ACCESS_KEY") != "") {
  apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"
}

def jscFlavor = "org.webkit:android-jsc:+"
def enableHermes = project.ext.react.get("enableHermes", false);

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
  compileSdkVersion 28

  defaultConfig {
    applicationId "com.iantracey.money"
    minSdkVersion rootProject.ext.minSdk
    targetSdkVersion rootProject.ext.targetSdk
    versionCode 1
    versionName "1.0.0"
    multiDexEnabled true
    testBuildType System.getProperty("testBuildType", "debug")
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    ndk {
      abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  signingConfigs {
    release {
      storeFile file("keystore.jks")
      storePassword "12345678"
      keyAlias "key0"
      keyPassword "12345678"
    }
  }

  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }

  buildTypes {
    release {
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      signingConfig signingConfigs.release
      matchingFallbacks = ["release"]
    }

    debug {
      matchingFallbacks = ["debug"]
    }
  }

  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(OutputFile.ABI)

      if (abi != null) {  // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }

  packagingOptions {
    exclude "META-INF/proguard/androidx-annotations.pro"
    exclude "META-INF/-no-jdk.kotlin_module"
    exclude "META-INF/DEPENDENCIES"
    exclude "META-INF/NOTICE"
    exclude "META-INF/LICENSE"
    exclude "META-INF/LICENSE.txt"
    exclude "META-INF/NOTICE.txt"
    pickFirst "lib/armeabi-v7a/libc++_shared.so"
    pickFirst "lib/arm64-v8a/libc++_shared.so"
    pickFirst "lib/x86/libc++_shared.so"
    pickFirst "lib/x86_64/libc++_shared.so"
  }
}

dependencies {
  implementation fileTree(dir: "libs", include: ["*.jar"])
  implementation "com.facebook.react:react-native:+"
  implementation "com.google.firebase:firebase-core:17.0.1"
  implementation "com.google.android.gms:play-services-base:17.0.0"
  implementation "com.android.support:design:28.0.0"
  implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

  // Enable flipper for Android
  debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}") { exclude group:"com.facebook.fbjni" }
  debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") { exclude group:"com.facebook.flipper" }
  debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") { exclude group:"com.facebook.flipper" }

  // Detox
  androidTestImplementation("com.wix:detox:+") { transitive = true }
  androidTestImplementation "junit:junit:4.12"

  if (enableHermes) {
    def hermesPath = "../../node_modules/hermes-engine/android/";
    debugImplementation files(hermesPath + "hermes-debug.aar")
    releaseImplementation files(hermesPath + "hermes-release.aar")
  } else {
    implementation jscFlavor
  }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into "libs"
}

apply plugin: "com.google.gms.google-services"
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project);
